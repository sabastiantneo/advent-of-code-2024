# import re
# ls = [] #list of items from do() to don't() 
# ls1 = [] #list of mul() from ls
# ls2=[] #list of multiplication integer

# with open("day3.txt") as file: 
#      line = file.read() 
# eqn = re.findall(r"do\(\).*?don't\(\)", line)
# ls.extend(eqn)

# #to account for before the first do() starts 
# eqn_int =re.search(r"mul\(\d+,\d+\).*?do\(\)", line)
# eqn_int = eqn_int.group()
# ls.append(eqn_int)

# for i in ls:
#     do_eqn = re.findall(r"mul\(\d+,\d+\)", i)
#     ls1.extend(do_eqn)

# for i in ls1: 
#     x = re.search(r"\d+,", i)
#     x = x.group().replace(",", "")
#     y = re.search(r",\d+", i)
#     y = y.group().replace(",", "")
  
#     ls2.append(int(x)*int(y))

# print(len(ls))
### DIDNT WORK 
import re

with open("day3.txt", "r") as file: 
    content = file.read() 

#Find the right pattern   
mul = re.compile(r"mul\((\d{1,3}),(\d{1,3})\)")
do = re.compile(r"do\(\)")
dont = re.compile(r"don't\(\)")

line = re.split(r"(?=mul\()|(?=do\(\))|(?=don't\(\))", content)
enabled = True   
total = 0  
for i in line:
    if do.match(i):
        enabled = True
    elif dont.match(i):
        enabled = False
    else:
        match = mul.match(i)
        if match and enabled:
            x, y = map(int, match.groups())
            total += x * y

print(total)

